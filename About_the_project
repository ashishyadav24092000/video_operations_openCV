1. About VideoCapture() method and its arguments::

##cv2.VideoCapture(video_path or device index)
##video_path: Locationvideo in your system in string form with their extensions ##like.mp4,.avi, etc.

##device index: It is just the number to specify the camera.Its possible values ie either 0 or -1.

2. About read method inside VideoCapture ::

virtual bool cv::VideoCapture::read(OutputArray 	image).

cv.VideoCapture.read([, image]) will return ->	retval, image.
retval =>True if any frame has been grabbed else false if no frames has been grabbed.

cv2.VideoCapture(0) --> This method/function combines VideoCapture::grab() and VideoCapture::retrieve() in one call.
This is the most convenient method for reading video files or capturing data from decode and returns the just grabbed frame. If no frames has been grabbed (camera has been disconnected, or there are no more frames in video file), the method returns false and the function returns empty image (with cv::Mat, test it with Mat::empty()).

3. VideoWriter method :: 

FOURCC is short for "four character code" - an identifier for a video codec, compression format, color or pixel format used in media files.
A character in this context is a 1 byte/8 bit value, thus a FOURCC always takes up exatly 32 bits/4 bytes in a file.

The four characters in a FOURCC is generally limited to be within the human readable characters in the ASCII table. Because of this it is easy to convey and communicate what the FOURCCs are within a media file.

AVI files is the most widespread, or the first widely used media file format, to use FOURCC identifiers for the codecs used to compress the various video/audio streams within the files
Some of the more well known FOURCCs include "DIVX", "XVID", "H264", "DX50". But these are just a few of the hundreds in use.


cv::VideoWriter::VideoWriter	(	const String & 	filename,
int 	fourcc,
double 	fps,
Size 	frameSize,
bool 	isColor = true 
)	

cv.VideoWriter(	filename, fourcc, fps, frameSize[, isColor])
                      OR
cv.VideoWriter(	filename, apiPreference, fourcc, fps, frameSize[, isColor])


4. CAP_PROP_FRAME_WIDTH AND CAP_PROP_FRAME_HEIGHT 

CAP_PROP_FRAME_WIDTH ------> SOMETIMES REPRESENETD BY INTEGER 3
Python: cv.CAP_PROP_FRAME_WIDTH
Width of the frames in the video stream.

CAP_PROP_FRAME_HEIGHT  ------> SOMETIMES REPRESENETD BY INTEGER4
Python: cv.CAP_PROP_FRAME_HEIGHT
Height of the frames in the video stream.


5. cv2.putText ---> cv2.putText() method is used to draw a text string on any image.

Syntax: cv2.putText(image, text, org, font, fontScale, color[, thickness[, lineType[, bottomLeftOrigin]]])

ABOUT PARAMETERS:
1. image: It is the image on which text is to be drawn.
2. text: Text string to be drawn.
3. org: It is the coordinates of the bottom-left corner of the text string in the image. The coordinates are represented as tuples of two values i.e. (X coordinate value, Y coordinate value).
4. font: It denotes the font type. Some of font types are FONT_HERSHEY_SIMPLEX, FONT_HERSHEY_PLAIN, , etc.
5. fontScale: Font scale factor that is multiplied by the font-specific base size.
color: It is the color of text string to be drawn. For BGR, we pass a tuple. eg: (255, 0, 0) for blue color.
6. thickness: It is the thickness of the line in px.
7. lineType: This is an optional parameter.It gives the type of the line to be used.
8. bottomLeftOrigin: This is an optional parameter. When it is true, the image data origin is at the bottom-left corner. Otherwise, it is at the top-left corner.


10.Return Value: It returns an image.